* Deploy caching ec2 and flake using terraform user_data
- This is a very simple document going over how we deploy a caching server to aws
- It assumes you have a /home/[user]/.aws/credentials_nix/config_nix
- Lets get into our terraform directory
#+begin_src tmux :session s1 
cd terraform/caching-server
#+end_src
- To nix run our flake we will need to add some extraOptions.
- Add the following to terraform configuration.nix
#+begin_example
  nix.extraOptions = ''
      extra-experimental-features = nix-command
      extra-experimental-features = flakes
    '';
#+end_example
- Now to test our user_data block, add the following to the main.tf/aws_instance block
- Note the content of the EOL file has no space in front of it
- Also important to note the env bash -xe, because /bin/bash failed, but it allowed env I changed it
#+begin_example
    user_data = <<-EOL
#!env bash -xe
# Orig with options being passed in before the configuration.nix update
#nix run github:bernokl/nix-ops --no-write-lock-file --extra-experimental-features nix-command --extra-experimental-features flakes &>/tmp/outNix
nix run github:bernokl/nix-ops --no-write-lock-file &> /tmp/nixOutput 
EOL
}
#+end_example
- If this works the goal will be to put the content of the script into a seperate file
- Lets go deploy our terraform and see what we got
- NOTE: Everytime you apply this it will restart the machine meaning currently you will get in ip
#+begin_src tmux :session s1
aws_terraform_apply
#+end_src
- ssh to our instance, grab the ip from the aws-console
#+begin_src tmux :session s1
ssh -i id_rsa.pem root@xx.xx.xx.xx 
#+end_src
- Test for working store
#+begin_src tmux :session s1
nix store ping --store http://127.0.0.1:8080 
#+end_src
- Should return
#+begin_example
Store URL: http://127.0.0.1:8080
#+end_example
- To test it locally you will need to whitelist your ip in iptables and see if our security group will let us hit the server from home
- Note there will also need to be a security group for port 8080 whitelist of your ip in main.cf
#+begin_src tmux :session s1
iptables -I INPUT 1 -s xx.xx.xx.xx/32 -j ACCEPT
#+end_src
- Logged out of the machine and try:
#+begin_src tmux :session s1
nix store ping --store http://xx.xx.xx.xx:8080 
#+end_src
- Simple way to find out what it is serving:
#+begin_src tmux :session s1
  lsof /nix/store | grep starm
  ps faux | grep starma
#+end_src
- Compare the pids between the two, you 
- If you have trouble hitting the server and want to confirm the traffic on the server side run:
#+begin_src tmux :session s1
tcpdump -i any port 8080
#+end_src
